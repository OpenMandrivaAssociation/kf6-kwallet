From bbf3787e00c8d28b8e8cc0196cd198675bd5c952 Mon Sep 17 00:00:00 2001
From: Nicolas Fella <nicolas.fella@gmx.de>
Date: Fri, 22 Sep 2023 19:21:45 +0200
Subject: [PATCH] Implement XDG Secrets Portal

This portal allows applications to obtain a master secret they can use to encrypt their data.

The secret is stored in KWallet.

If no secret exists yet a new one is generated

BUG: 466197
---
 .../org.freedesktop.impl.portal.Secret.xml    | 66 +++++++++++++
 src/runtime/kwalletd/CMakeLists.txt           |  7 ++
 src/runtime/kwalletd/kwallet.portal           |  4 +
 src/runtime/kwalletd/kwalletd.cpp             |  3 +
 src/runtime/kwalletd/kwalletportalsecrets.cpp | 99 +++++++++++++++++++
 src/runtime/kwalletd/kwalletportalsecrets.h   | 47 +++++++++
 6 files changed, 226 insertions(+)
 create mode 100644 src/api/KWallet/org.freedesktop.impl.portal.Secret.xml
 create mode 100644 src/runtime/kwalletd/kwallet.portal
 create mode 100644 src/runtime/kwalletd/kwalletportalsecrets.cpp
 create mode 100644 src/runtime/kwalletd/kwalletportalsecrets.h

diff --git a/src/api/KWallet/org.freedesktop.impl.portal.Secret.xml b/src/api/KWallet/org.freedesktop.impl.portal.Secret.xml
new file mode 100644
index 00000000..f540a72e
--- /dev/null
+++ b/src/api/KWallet/org.freedesktop.impl.portal.Secret.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0"?>
+<!--
+ Copyright (C) 2019 Red Hat, Inc.
+
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either
+ version 2 of the License, or (at your option) any later version.
+
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+
+ You should have received a copy of the GNU Lesser General Public
+ License along with this library. If not, see <http://www.gnu.org/licenses/>.
+
+ Author: Daiki Ueno <dueno@redhat.com>
+-->
+
+<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
+  <!--
+      org.freedesktop.impl.portal.Secret:
+      @short_description: Secret portal backend interface
+
+      The Secret portal allows sandboxed applications to retrieve a
+      per-application master secret.
+  -->
+  <interface name="org.freedesktop.impl.portal.Secret">
+
+    <!--
+        RetrieveSecret:
+        @handle: Object path for the #org.freedesktop.impl.portal.Request object representing this call
+        @app_id: App id of the application
+        @fd: Writable file descriptor for transporting the secret
+        @options: Vardict with optional further information
+        @response: Numeric response
+        @results: Vardict with the results of the call
+
+        Retrieves a master secret for a sandboxed application.
+
+        Supported keys in the @options vardict include:
+        <variablelist>
+          <varlistentry>
+            <term>token s</term>
+            <listitem><para>
+              An opaque string associated with the retrieve secret.
+            </para></listitem>
+          </varlistentry>
+        </variablelist>
+    -->
+    <method name="RetrieveSecret">
+      <annotation name="org.gtk.GDBus.C.Name" value="retrieve_secret"/>
+      <annotation name="org.gtk.GDBus.C.UnixFD" value="true"/>
+      <arg type="o" name="handle" direction="in"/>
+      <arg type="s" name="app_id" direction="in"/>
+      <arg type="h" name="fd" direction="in"/>
+      <annotation name="org.qtproject.QtDBus.QtTypeName.In3" value="QVariantMap"/>
+      <arg type="a{sv}" name="options" direction="in"/>
+      <arg type="u" name="response" direction="out"/>
+      <annotation name="org.qtproject.QtDBus.QtTypeName.Out1" value="QVariantMap"/>
+      <arg type="a{sv}" name="results" direction="out"/>
+    </method>
+    <property name="version" type="u" access="read"/>
+  </interface>
+</node>
diff --git a/src/runtime/kwalletd/CMakeLists.txt b/src/runtime/kwalletd/CMakeLists.txt
index 23c39f77..6baf5f24 100644
--- a/src/runtime/kwalletd/CMakeLists.txt
+++ b/src/runtime/kwalletd/CMakeLists.txt
@@ -59,6 +59,8 @@ target_sources(kwalletd6 PRIVATE
    kwalletfreedesktopitem.cpp
    kwalletfreedesktopprompt.cpp
    kwalletfreedesktopattributes.cpp
+
+   kwalletportalsecrets.cpp
 )
 ecm_qt_declare_logging_category(kwalletd6
     HEADER kwalletd_debug.h
@@ -101,6 +103,7 @@ set(fdo_session_xml ${CMAKE_SOURCE_DIR}/src/api/KWallet/org.freedesktop.Secrets.
 set(fdo_collection_xml ${CMAKE_SOURCE_DIR}/src/api/KWallet/org.freedesktop.Secrets.Collection.xml)
 set(fdo_item_xml ${CMAKE_SOURCE_DIR}/src/api/KWallet/org.freedesktop.Secrets.Item.xml)
 set(fdo_prompt_xml ${CMAKE_SOURCE_DIR}/src/api/KWallet/org.freedesktop.Secrets.Prompt.xml)
+set(fdo_portal_secret_xml ${CMAKE_SOURCE_DIR}/src/api/KWallet/org.freedesktop.impl.portal.Secret.xml)
 
 set(kwalletd_dbus_SRCS)
 qt_add_dbus_adaptor(kwalletd_dbus_SRCS ${kwallet_xml} kwalletd.h KWalletD kwalletadaptor KWalletAdaptor)
@@ -114,6 +117,9 @@ qt_add_dbus_adaptor(kwalletd_dbus_SRCS ${fdo_item_xml} kwalletfreedesktopitem.h
     kwalletfreedesktopitemadaptor KWalletFreedesktopItemAdaptor)
 qt_add_dbus_adaptor(kwalletd_dbus_SRCS ${fdo_prompt_xml} kwalletfreedesktopprompt.h KWalletFreedesktopPrompt
     kwalletfreedesktoppromptadaptor KWalletFreedesktopPromptAdaptor)
+qt_add_dbus_adaptor(kwalletd_dbus_SRCS ${fdo_portal_secret_xml} kwalletportalsecrets.h KWalletPortalSecrets
+    kwalletportalsecretsadaptor KWalletPortalSecretsAdaptor)
+
 target_sources(kwalletd6 PRIVATE
     ${kwalletd_dbus_SRCS}
 )
@@ -162,4 +168,5 @@ install(TARGETS kwalletd6  ${KF_INSTALL_TARGETS_DEFAULT_ARGS})
 ########### install files ###############
 install( FILES kwalletd6.notifyrc DESTINATION  ${KDE_INSTALL_KNOTIFYRCDIR} )
 install( FILES org.kde.kwalletd6.desktop DESTINATION ${KDE_INSTALL_APPDIR} )
+install( FILES kwallet.portal DESTINATION ${KDE_INSTALL_DATADIR}/xdg-desktop-portal/portals)
 
diff --git a/src/runtime/kwalletd/kwallet.portal b/src/runtime/kwalletd/kwallet.portal
new file mode 100644
index 00000000..8198428a
--- /dev/null
+++ b/src/runtime/kwalletd/kwallet.portal
@@ -0,0 +1,4 @@
+[portal]
+DBusName=org.freedesktop.impl.portal.desktop.kwallet
+Interfaces=org.freedesktop.impl.portal.Secret;
+UseIn=kde
diff --git a/src/runtime/kwalletd/kwalletd.cpp b/src/runtime/kwalletd/kwalletd.cpp
index 164ec79b..cac97a2e 100644
--- a/src/runtime/kwalletd/kwalletd.cpp
+++ b/src/runtime/kwalletd/kwalletd.cpp
@@ -15,6 +15,7 @@
 #include "kwalletfreedesktopprompt.h"
 #include "kwalletfreedesktopservice.h"
 #include "kwalletfreedesktopsession.h"
+#include "kwalletportalsecrets.h"
 #include "kwalletwizard.h"
 
 #ifdef HAVE_GPGMEPP
@@ -151,6 +152,8 @@ KWalletD::KWalletD()
         // register also with the KF5 names for backward compatibility
         QDBusConnection::sessionBus().interface()->registerService(QStringLiteral("org.kde.kwalletd5"), QDBusConnectionInterface::QueueService);
         QDBusConnection::sessionBus().registerObject(QStringLiteral("/modules/kwalletd5"), this);
+
+        new KWalletPortalSecrets(this);
     }
 
 #ifdef Q_WS_X11
diff --git a/src/runtime/kwalletd/kwalletportalsecrets.cpp b/src/runtime/kwalletd/kwalletportalsecrets.cpp
new file mode 100644
index 00000000..dd818b8c
--- /dev/null
+++ b/src/runtime/kwalletd/kwalletportalsecrets.cpp
@@ -0,0 +1,99 @@
+/*
+    This file is part of the KDE libraries
+    SPDX-FileCopyrightText: 2023 Nicolas Fella <nicolas.fella@gmx.de>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+*/
+
+#include "kwalletportalsecrets.h"
+
+#include "kwalletportalsecretsadaptor.h"
+
+#include <QRandomGenerator>
+
+KWalletPortalSecrets::KWalletPortalSecrets(KWalletD *parent)
+    : QObject(parent)
+    , m_kwalletd(parent)
+{
+    (void)new KWalletPortalSecretsAdaptor(this);
+
+    QDBusConnection::sessionBus().registerService(QStringLiteral("org.freedesktop.impl.portal.desktop.kwallet"));
+    QDBusConnection::sessionBus().registerObject(QStringLiteral("/org/freedesktop/portal/desktop"), this, QDBusConnection::ExportAdaptors);
+
+    connect(m_kwalletd, &KWalletD::walletAsyncOpened, this, &KWalletPortalSecrets::walletOpened);
+}
+
+uint KWalletPortalSecrets::RetrieveSecret(const QDBusObjectPath &handle,
+                                          const QString &app_id,
+                                          const QDBusUnixFileDescriptor &fd,
+                                          const QVariantMap &options,
+                                          QVariantMap &results)
+{
+    Q_UNUSED(handle);
+    Q_UNUSED(options);
+    Q_UNUSED(results);
+
+    setDelayedReply(true);
+
+    const QString wallet = m_kwalletd->networkWallet();
+    const bool walletIsOpen = m_kwalletd->isOpen(m_kwalletd->networkWallet());
+
+    Request request{message(), fd.fileDescriptor(), app_id};
+
+    if (!walletIsOpen) {
+        m_pendingRequests.insert(app_id, request);
+        m_kwalletd->openAsync(wallet, 0, app_id, false, connection(), message());
+    } else {
+        Q_ASSERT(m_handle != -1);
+        handleRequest(request);
+    }
+
+    return 0;
+}
+
+void KWalletPortalSecrets::walletOpened(int id, int handle)
+{
+    Q_UNUSED(id);
+    Q_ASSERT(handle != -1);
+
+    m_handle = handle;
+
+    for (const Request &request : std::as_const(m_pendingRequests)) {
+        handleRequest(request);
+    }
+
+    m_pendingRequests.clear();
+}
+
+void KWalletPortalSecrets::handleRequest(const Request &request)
+{
+    bool exists = m_kwalletd->hasEntry(m_handle, "xdg-desktop-portal", request.appId, request.appId);
+
+    QByteArray secret;
+
+    if (exists) {
+        secret = m_kwalletd->readEntry(m_handle, "xdg-desktop-portal", request.appId, request.appId);
+    } else {
+        secret = generateSecret();
+        m_kwalletd->writeEntry(m_handle, "xdg-desktop-portal", request.appId, secret, request.appId);
+        m_kwalletd->sync(m_handle, request.appId);
+    }
+
+    QFile outFile;
+    outFile.open(request.fd, QIODevice::ReadWrite);
+
+    outFile.write(secret);
+
+    auto reply = request.message.createReply(0);
+    QDBusConnection::sessionBus().send(reply);
+}
+
+QByteArray KWalletPortalSecrets::generateSecret() const
+{
+    const int secretSize = 64;
+    QByteArray secret;
+    secret.resize(secretSize);
+    QRandomGenerator::securelySeeded().generate(secret.begin(), secret.end());
+
+    return secret;
+}
diff --git a/src/runtime/kwalletd/kwalletportalsecrets.h b/src/runtime/kwalletd/kwalletportalsecrets.h
new file mode 100644
index 00000000..0c01c2cf
--- /dev/null
+++ b/src/runtime/kwalletd/kwalletportalsecrets.h
@@ -0,0 +1,47 @@
+/*
+    This file is part of the KDE libraries
+    SPDX-FileCopyrightText: 2023 Nicolas Fella <nicolas.fella@gmx.de>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+*/
+
+#ifndef KWALLETPORTALSECRETS_H
+#define KWALLETPORTALSECRETS_H
+
+#include <QDBusObjectPath>
+#include <QDBusUnixFileDescriptor>
+#include <QObject>
+
+#include "kwalletd.h"
+
+class KWalletPortalSecrets : public QObject, protected QDBusContext
+{
+    Q_OBJECT
+
+public:
+    KWalletPortalSecrets(KWalletD *parent);
+
+public Q_SLOTS:
+    uint
+    RetrieveSecret(const QDBusObjectPath &handle, const QString &app_id, const QDBusUnixFileDescriptor &fd, const QVariantMap &options, QVariantMap &results);
+
+private Q_SLOTS:
+    void walletOpened(int id, int handle);
+
+private:
+    struct Request {
+        QDBusMessage message;
+        int fd;
+        QString appId;
+    };
+
+    QByteArray generateSecret() const;
+    void handleRequest(const Request &request);
+
+    QHash<QString, Request> m_pendingRequests;
+    int m_handle = -1;
+
+    KWalletD *m_kwalletd;
+};
+
+#endif
-- 
GitLab

